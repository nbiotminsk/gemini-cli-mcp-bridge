#!/usr/bin/env node

/**
 * –ö–∞—Å—Ç–æ–º–Ω—ã–π MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Ultimate AI Gemini –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
 * 
 * –≠—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç MCP-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å
 * –≤–∞—à–∏–º Gemini –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º –ø–æ –∞–¥—Ä–µ—Å—É https://smart.ultimateai.org/v1
 */

const { Server } = require('@modelcontextprotocol/sdk/server/index.js');
const { StdioServerTransport } = require('@modelcontextprotocol/sdk/server/stdio.js');
const {
  CallToolRequestSchema,
  ErrorCode,
  ListToolsRequestSchema,
  McpError,
} = require('@modelcontextprotocol/sdk/types.js');

const axios = require('axios');
const fs = require('fs').promises;
const path = require('path');

class CustomGeminiMCPServer {
  constructor() {
    this.server = new Server(
      {
        name: 'gpt5-mcp-server',
        version: '1.0.0',
      },
      {
        capabilities: {
          tools: {},
        },
      }
    );

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    this.apiBaseUrl = process.env.API_BASE_URL || 'https://smart.ultimateai.org/v1';
    this.apiKey = process.env.ULTIMATE_AI_API_KEY || process.env.GEMINI_API_KEY || process.env.OPENAI_API_KEY;
    this.defaultModel = process.env.DEFAULT_MODEL || 'Gemini 2.0 Flash';
    this.debug = process.env.DEBUG_MCP === 'true';
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–º DEBUG_MCP
    if (this.debug) {
      this.log(`üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:`);
      this.log(`üìç API Base URL: ${this.apiBaseUrl}`);
      this.log(`ü§ñ –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${this.defaultModel}`);
      this.log(`üîë API –∫–ª—é—á: ${this.apiKey ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω'}`);
    }
    
    if (!this.apiKey) {
      this.log('‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ULTIMATE_AI_API_KEY –∏–ª–∏ GEMINI_API_KEY');
      process.exit(1);
    }

    this.setupHandlers();
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  log(message) {
    if (this.debug || process.env.NODE_ENV === 'development') {
      console.error(message);
    }
  }

  setupHandlers() {
    // –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    this.server.setRequestHandler(ListToolsRequestSchema, async () => {
      return {
        tools: [
          {
            name: 'gpt5',
            description: '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –º–æ–¥–µ–ª—å GPT-5 —á–µ—Ä–µ–∑ –≤–∞—à –ø—Ä–æ–≤–∞–π–¥–µ—Ä Ultimate AI',
            inputSchema: {
              type: 'object',
              properties: {
                message: {
                  type: 'string',
                  description: '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ GPT-5',
                },
                temperature: {
                  type: 'number',
                  description: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (0.0-1.0)',
                  default: 0.7,
                },
              },
              required: ['message'],
            },
          },
          {
            name: 'gpt41',
            description: '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –º–æ–¥–µ–ª—å GPT-4.1 —á–µ—Ä–µ–∑ –≤–∞—à –ø—Ä–æ–≤–∞–π–¥–µ—Ä Ultimate AI',
            inputSchema: {
              type: 'object',
              properties: {
                message: {
                  type: 'string',
                  description: '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ GPT-4.1',
                },
                temperature: {
                  type: 'number',
                  description: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (0.0-1.0)',
                  default: 0.7,
                },
              },
              required: ['message'],
            },
          },
          {
            name: 'kimi',
            description: '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –º–æ–¥–µ–ª—å Kimi-K2 —á–µ—Ä–µ–∑ –≤–∞—à –ø—Ä–æ–≤–∞–π–¥–µ—Ä Ultimate AI',
            inputSchema: {
              type: 'object',
              properties: {
                message: {
                  type: 'string',
                  description: '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Kimi-K2',
                },
                temperature: {
                  type: 'number',
                  description: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (0.0-1.0)',
                  default: 0.7,
                },
              },
              required: ['message'],
            },
          },
          {
            name: 'claude',
            description: '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –º–æ–¥–µ–ª—å Claude Opus —á–µ—Ä–µ–∑ –≤–∞—à –ø—Ä–æ–≤–∞–π–¥–µ—Ä Ultimate AI',
            inputSchema: {
              type: 'object',
              properties: {
                message: {
                  type: 'string',
                  description: '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Claude Opus',
                },
                temperature: {
                  type: 'number',
                  description: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (0.0-1.0)',
                  default: 0.7,
                },
              },
              required: ['message'],
            },
          },
          {
            name: 'glm',
            description: '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –º–æ–¥–µ–ª—å GLM-4.5 —á–µ—Ä–µ–∑ –≤–∞—à –ø—Ä–æ–≤–∞–π–¥–µ—Ä Ultimate AI',
            inputSchema: {
              type: 'object',
              properties: {
                message: {
                  type: 'string',
                  description: '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ GLM-4.5',
                },
                temperature: {
                  type: 'number',
                  description: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (0.0-1.0)',
                  default: 0.7,
                },
              },
              required: ['message'],
            },
          },
          {
            name: 'read_local_file',
            description: '–ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞',
            inputSchema: {
              type: 'object',
              properties: {
                filepath: {
                  type: 'string',
                  description: '–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —á—Ç–µ–Ω–∏—è',
                },
              },
              required: ['filepath'],
            },
          },
          {
            name: 'list_directory',
            description: '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏',
            inputSchema: {
              type: 'object',
              properties: {
                dirpath: {
                  type: 'string',
                  description: '–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏',
                  default: '.',
                },
              },
            },
          },
        ],
      };
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    this.server.setRequestHandler(CallToolRequestSchema, async (request) => {
      try {
        switch (request.params.name) {
          case 'gpt5':
            return await this.handleAIModel(request.params.arguments, 'gpt-5-chat');
          case 'gpt41':
            return await this.handleAIModel(request.params.arguments, 'gpt-4.1');
          case 'kimi':
            return await this.handleAIModel(request.params.arguments, 'kimi-k2');
          case 'claude':
            return await this.handleAIModel(request.params.arguments, 'claudeopus');
          case 'glm':
            return await this.handleAIModel(request.params.arguments, 'glm-4.5');
          case 'read_local_file':
            return await this.handleReadFile(request.params.arguments);
          case 'list_directory':
            return await this.handleListDirectory(request.params.arguments);
          default:
            throw new McpError(
              ErrorCode.MethodNotFound,
              `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: ${request.params.name}`
            );
        }
      } catch (error) {
        this.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: ' + error.message);
        throw new McpError(
          ErrorCode.InternalError,
          `–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${error.message}`
        );
      }
    });
  }

  async handleAIModel(args, modelName) {
    const { message, temperature = 0.7 } = args;
    
    // –ú–∞–ø–ø–∏–Ω–≥ –∏–º–µ–Ω –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const modelDisplayNames = {
      'gpt-5-chat': 'GPT-5',
      'gpt-4.1': 'GPT-4.1',
      'kimi-k2': 'Kimi-K2',
      'claudeopus': 'Claude Opus',
      'glm-4.5': 'GLM-4.5'
    };
    
    const displayName = modelDisplayNames[modelName] || modelName;

    try {
      if (this.debug) {
        this.log(`üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ ${displayName} (${modelName})`);
      }
      
      const response = await axios.post(
        `${this.apiBaseUrl}/chat/completions`,
        {
          model: modelName,
          messages: [
            {
              role: 'user',
              content: message,
            },
          ],
          temperature: temperature,
          max_tokens: 4096,
        },
        {
          headers: {
            'Authorization': `Bearer ${this.apiKey}`,
            'Content-Type': 'application/json',
          },
          timeout: 30000,
        }
      );

      let content = response.data?.choices?.[0]?.message?.content || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏';
      
      // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
      content = content.trim();
      
      // –û—Ç–ª–∞–¥–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ—Ç API
      if (this.debug) {
        this.log(`üì• –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç ${displayName}:`);
        this.log(JSON.stringify(response.data, null, 2));
        this.log(`üìÑ –ö–æ–Ω—Ç–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç ${displayName}:`);
        this.log(content);
      }
      
      return {
        content: [
          {
            type: 'text',
            text: content,
          },
        ],
      };
    } catch (error) {
      this.log(`–û—à–∏–±–∫–∞ API –¥–ª—è ${displayName}: ` + (error.response?.data || error.message));
      return {
        content: [
          {
            type: 'text',
            text: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ ${displayName}: ${error.response?.data?.error?.message || error.message}`,
          },
        ],
      };
    }
  }

  async handleReadFile(args) {
    const { filepath } = args;

    try {
      const absolutePath = path.resolve(filepath);
      const content = await fs.readFile(absolutePath, 'utf-8');
      
      return {
        content: [
          {
            type: 'text',
            text: `üìÑ **–§–∞–π–ª: ${filepath}**\n\`\`\`\n${content}\n\`\`\``,
          },
        ],
      };
    } catch (error) {
      return {
        content: [
          {
            type: 'text',
            text: `‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${error.message}`,
          },
        ],
      };
    }
  }

  async handleListDirectory(args) {
    const { dirpath = '.' } = args;

    try {
      const absolutePath = path.resolve(dirpath);
      const items = await fs.readdir(absolutePath, { withFileTypes: true });
      
      const filesList = items
        .map(item => `${item.isDirectory() ? 'üìÅ' : 'üìÑ'} ${item.name}`)
        .join('\n');

      return {
        content: [
          {
            type: 'text',
            text: `üìÇ **–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: ${dirpath}**\n\n${filesList}`,
          },
        ],
      };
    } catch (error) {
      return {
        content: [
          {
            type: 'text',
            text: `‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${error.message}`,
          },
        ],
      };
    }
  }

  async run() {
    const transport = new StdioServerTransport();
    await this.server.connect(transport);
    // –ú–æ–ª—á–∞–ª–∏–≤—ã–π –∑–∞–ø—É—Å–∫ - –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞/–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGTERM', () => {
  console.error('üì¥ MCP —Å–µ—Ä–≤–µ—Ä –ø–æ–ª—É—á–∏–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.error('üì¥ MCP —Å–µ—Ä–≤–µ—Ä –ø–æ–ª—É—á–∏–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  process.exit(0);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
  console.error('‚ùå –ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå –ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if (require.main === module) {
  const server = new CustomGeminiMCPServer();
  server.run().catch((error) => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  });
}
